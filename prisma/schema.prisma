generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-arm64-openssl-3.0.x", "linux-musl-openssl-3.0.x", "rhel-openssl-1.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Role {
  id          String   @id @default(cuid())
  code        String   @unique
  name        String   @unique
  slug        String   @unique
  description String
  permissions String[]
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id])
  userId      String

  @@map("roles")
}

model Permission {
  id          String   @id @default(cuid())
  code        String   @unique
  name        String   @unique
  slug        String   @unique
  description String
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id])
  userId      String

  @@map("permissions")
}

model User {
  id             String         @id @default(cuid())
  name           String?
  firstName      String?
  lastName       String?
  gender         String?
  dob            DateTime?
  mobile         String?        @unique
  email          String         @unique
  password       String
  bio            String?
  termsAccepted  Boolean?       @default(false)
  imageUrl       String?
  coverImageUrl  String?
  isOnboarded    Boolean        @default(false)
  emailVerified  DateTime?
  mobileVerified DateTime?
  role           String?        @default("ADMIN")
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  accounts       Account[]
  sessions       Session[]
  Post           Post[]
  Announcement   Announcement[]
  Event          Event[]
  Download       Download[]
  MainMenu       MainMenu[]
  MenuItem       ChildMenu[]
  Leadership     Leadership[]
  Slider         Slider[]
  Tag            Tag[]
  Link           Link[]
  Social         Social[]
  Comment        Comment[]
  Page           Page[]
  Organization   Organization[]
  Role           Role[]
  Permission     Permission[]
  Asset          Asset[]

  @@map("users")
}

model Account {
  id                String   @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@map("sessions")
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
  @@map("verification_tokens")
}

model Organization {
  id          String   @id @default(uuid())
  name        String   @unique
  slogan      String?
  description String
  logoUrl     String?
  coverUrl    String?
  address     String
  email       String   @unique
  telephone   String?  @unique
  fax         String?  @unique
  mobile      String   @unique
  region      String?
  district    String?
  council     String?
  ward        String?
  social      String[] @default([])
  isCompleted Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id])
  userId      String

  @@map("organizations")
}

model Asset {
  id               String         @id @default(uuid())
  bucketName       String
  originalName     String
  fileName         String         @unique
  fileType         String
  fileSize         Int
  fileUrl          String?        @unique
  base64           String?
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  category         UploadCategory @relation(fields: [uploadCategoryId], references: [id])
  uploadCategoryId String
  user             User           @relation(fields: [userId], references: [id])
  userId           String

  @@map("assets")
}

model Social {
  id         String   @id @default(cuid())
  name       String   @unique
  handle     String?
  profileUrl String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  user       User     @relation(fields: [userId], references: [id])
  userId     String

  @@map("socials")
}

model UploadCategory {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  code        String
  Asset       Asset[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("upload_categories")
}

model MainMenu {
  id          String      @id @default(cuid())
  position    Int
  title       String      @unique
  slug        String      @unique
  description String
  imageUrl    String
  link        String      @unique
  externalUrl Boolean     @default(false)
  active      Boolean     @default(true)
  user        User?       @relation(fields: [userId], references: [id])
  children    ChildMenu[]
  userId      String
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  @@map("main_menus")
}

model ChildMenu {
  id          String    @id @default(cuid())
  title       String    @unique
  slug        String    @unique
  description String
  imageUrl    String?
  link        String    @unique
  externalUrl Boolean   @default(false)
  active      Boolean   @default(false)
  parent      MainMenu? @relation(fields: [parentId], references: [id])
  parentId    String?
  author      User      @relation(fields: [userId], references: [id])
  userId      String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@map("child_menus")
}

model FooterLabel {
  id          String @id @default(cuid())
  label       String @unique
  code        String @unique
  description String

  @@map("footer_labels")
}

model Link {
  id          String    @id @default(cuid())
  label       String    @unique
  slug        String    @unique
  description String?
  link        String    @unique
  externalUrl Boolean   @default(false)
  isPublished Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  publishedAt DateTime?
  author      User      @relation(fields: [userId], references: [id])
  userId      String

  @@map("links")
}

model Tag {
  id          String   @id @default(cuid())
  name        String   @unique
  slug        String   @unique
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id])
  userId      String

  @@map("tags")
}

model Post {
  id          String    @id @default(cuid())
  title       String
  content     String
  imageUrl    String
  slug        String    @unique
  tags        String[]
  views       Int?      @default(0)
  likes       Int?      @default(0)
  dislikes    Int?      @default(0)
  isFeatured  Boolean?  @default(false)
  reading     Int?      @default(0)
  isPublished Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  publishedAt DateTime?
  author      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String    @map("user_id")
  Comment     Comment[]

  @@map("posts")
}

model Announcement {
  id          String    @id @default(cuid())
  title       String    @unique
  slug        String    @unique
  content     String
  imageUrl    String?
  views       Int?      @default(0)
  likes       Int?      @default(0)
  dislikes    Int?      @default(0)
  active      Boolean?  @default(false)
  isPublished Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  publishedAt DateTime?
  author      User      @relation(fields: [userId], references: [id])
  userId      String

  @@map("announcements")
}

model Event {
  id          String    @id @default(cuid())
  title       String    @unique
  slug        String    @unique
  description String
  startDate   DateTime
  endDate     DateTime
  venue       String
  location    String
  contacts    String?
  imageUrl    String?
  active      Boolean?  @default(false)
  isPublished Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  publishedAt DateTime?
  author      User      @relation(fields: [userId], references: [id])
  userId      String

  @@map("events")
}

model Download {
  id          String    @id @default(cuid())
  title       String    @unique
  slug        String    @unique
  content     String
  fileUrl     String
  fileName    String
  fileType    String
  fileSize    Int
  downloads   Int?      @default(0)
  views       Int?      @default(0)
  forPublic   Boolean?  @default(true)
  active      Boolean?  @default(false)
  isPublished Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  publishedAt DateTime?
  author      User      @relation(fields: [userId], references: [id])
  userId      String

  @@map("downloads")
}

model Leadership {
  id           String    @id @default(cuid())
  name         String    @unique
  title        String    @unique
  description  String
  imageUrl     String
  constituency String?
  memberSince  String?
  appointed    String?
  bio          String?
  mobile       String?   @unique
  email        String?   @unique
  active       Boolean?  @default(false)
  isPublished  Boolean   @default(false)
  social       String[]  @default([])
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  publishedAt  DateTime?
  author       User      @relation(fields: [userId], references: [id])
  userId       String

  @@map("leadership")
}

model Slider {
  id          String    @id @default(cuid())
  title       String?   @unique
  slug        String    @unique
  description String?
  imageUrl    String
  link        String    @unique
  isPublished Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  publishedAt DateTime?
  author      User      @relation(fields: [userId], references: [id])
  userId      String

  @@map("sliders")
}

model Comment {
  id          String    @id @default(cuid())
  content     String
  post        Post      @relation(fields: [postId], references: [id])
  user        User      @relation(fields: [userId], references: [id])
  postId      String
  userId      String
  isPublished Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  publishedAt DateTime?
  pageId      String?

  @@map("comments")
}

model Message {
  id          String    @id @default(cuid())
  subject     String
  content     String
  email       String    @unique
  mobile      String    @unique
  isPublished Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  publishedAt DateTime?

  @@map("messages")
}

model Page {
  id          String    @id @default(cuid())
  title       String    @unique
  content     String
  imageUrl    String
  slug        String    @unique
  pageLink    String    @unique
  parentLink  String
  views       Int?      @default(0)
  likes       Int?      @default(0)
  dislikes    Int?      @default(0)
  reading     Int?      @default(0)
  isPublished Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  publishedAt DateTime?
  author      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String    @map("user_id")

  @@map("pages")
}
